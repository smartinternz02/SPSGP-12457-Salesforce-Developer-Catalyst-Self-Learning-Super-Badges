3.1 Use Future Methods

AccountProcessor

public class AccountProcessor {
@future
public static void countContacts(List<Id> accountIds){
List<Account> accList = [Select Id, Number_Of_Contacts__c,
(Select Id from Contacts) from Account where Id in :
accountIds];
For(Account acc: accList){
acc.Number_Of_Contacts__c = acc.Contacts.size();
}
update accList;
}
}

AccountProcessorTest

@isTest
public class AccountProcessorTest {
public static testmethod void testAccountProcessor(){
Account a =new Account();
a.Name = 'Test Account';
insert a;
Contact con = new Contact();
con.FirstName = 'Rajat';
con.LastName = 'Prasad';
con.AccountId = a.Id;
insert con;
List<Id> accListId = new List<Id>();
accListId.add(a.Id);
Test.startTest();
AccountProcessor.countContacts(accListId);
Test.stopTest();
Account acc = [Select Number_Of_Contacts__c from Account where Id
=: a.Id];
System.assertEquals(Integer.valueOf(acc.Number_Of_Contacts__c), 1);
}
}

3.2 Use Batch Apex

LeadProcessor

public class LeadProcessor implements Database.Batchable<sObject> {
public Database.QueryLocator start(Database.BatchableContext bc) {
// collect the batches of records or objects to be passed to execute
return Database.getQueryLocator([Select LeadSource From Lead]);
}
public void execute(Database.BatchableContext bc, List<Lead> leads){
// process each batch of records
for (Lead Lead : leads) {
lead.LeadSource = 'Dreamforce';
}
update leads;
}
public void finish(Database.BatchableContext bc){
// execute any post-processing operations
}
}

LeadProcessorTest

@isTest
private class LeadProcessorTest {
@testSetup
static void setup() {
List<Lead> leads = new List<Lead>();
for (Integer counter=0;counter<200;counter++) {
Lead lead = new Lead();
lead.FirstName = 'FirstName';
lead.LastName = 'LastName';
lead.Company = 'demo'+counter;
leads.add(lead);
}
insert leads;
}
@isTest static void test() {
Test.startTest();
LeadProcessor leadProcessor = new leadProcessor();
Id batchId = Database.executeBatch(leadProcessor);
Test.stopTest();
}
}

3.3 Control Processes with Queueable Apex

AddPrimaryContact

public class AddPrimaryContact implements Queueable {
private Contact c;
private String state;
public AddPrimaryContact (Contact c, String state)
{
this.c = c;
this.state = state;
}
public void execute(QueueableContext context)
{
List<Account> ListAccount = [SELECT ID, Name ,(Select
id,FirstName,LastName from contacts) FROM Account WHERE Billingstate
= :state LIMIT 200];
List<Contact> lstContact = new List<Contact>();
for ( Account acc: ListAccount)
{
Contact cont = c.clone(false,false,false,false);
cont.AccountId = acc.Id;
lstContact.add(cont);
}
if (lstContact.size() > 0)
{
insert lstContact;
}
}
}

AddPrimaryContactTest

@isTest
public class AddPrimaryContactTest
{
@isTest static void TestList()
{
List<Account> Teste = new List<Account>();
for (Integer i=0; i<50; i++)
{
Teste.add(new Account(BillingState = 'CA', name = 'Test'+i));
}
for (Integer j=0; j<50; j++)
{
Teste.add(new Account(BillingState = 'NY', name = 'Test'+j));
}
insert Teste;
Contact co = new Contact();
co.FirstName='demo';
co.LastName='demo';
insert co;
String state = 'CA';
AddPrimaryContact apc = new AddPrimaryContact(co, state);
Test.startTest();
System.enqueueJob(apc);
Test.stopTest();
}
}

3.4 Schedule Jobs Using the Apex Scheduler

DailyLeadProcessor

public class DailyLeadProcessor implements Schedulable {
public void execute(SchedulableContext SC){
List<Lead> LeadObj=[SELECT Id from Lead where LeadSource=null
limit 200];
for (Lead l: LeadObj) {
l.LeadSource= 'Dreamforce';
update l;
}
}
}

DailyLeadProcessorTest

@isTest
private class DailyLeadProcessorTest {
static testMethod void testDailyLeadProcessor() {
String CRON_EXP = '0 0 1 * * ?';
List<Lead> Lista = new List<Lead>();
for (Integer i = 0; i < 200; i++) {
Lista.add(new Lead (LastName='Dreamforce'+i, Company='Test1
Inc.', Status='Open - Not Contacted'));
}
insert Lista;
Test.startTest();
String jobId = System.schedule('DailyLeadProcessor', CRON_EXP, new
DailyLeadProcessor());
}
}
