4.1 Apex REST Callouts

AnimalLocator

public class AnimalLocator {
public static String getAnimalNameById(Integer x){
Http http = new Http();
HttpRequest req = new HttpRequest();
req.setEndpoint('https://th-apex-http-callout.herokuapp.com/animals/'
+ x);
req.setMethod('GET');
Map<String, Object> animal = new Map<String, Object>();
HttpResponse res = http.send(req);
if(res.getStatusCode() == 200){
Map<String, Object> results = (Map<String,
Object>)JSON.deserializeUntyped(res.getBody());
animal = (Map<String, Object>) results.get('animal');
}
return (String)animal.get('name');
}
}

AnimalLocatorMock

@isTest
global class AnimalLocatorMock implements HttpCalloutMock {
global HTTPResponse respond(HTTPRequest request){
HttpResponse response = new HttpResponse();
response.setHeader('Content-Type', 'application/json');
response.setBody('{"animals":
["lion","fox","bear","panda","snake","raccoon"]}');
response.setStatusCode(200);
return response;
}
}

AnimalLocatorTest

@isTest
private class AnimalLocatorTest {
@isTest static void AnimalLocatorMock1(){
try{
Test.setMock(HttpCalloutMock.class, new AnimalLocatorMock());
String result = AnimalLocator.getAnimalNameById(1);
String expectedResult = 'fox';
System.assertEquals(result, expectedResult);
}
catch (exception e){
System.debug('The following exception has occured: '+
e.getMessage());
}
}
}

4.2 Apex SOAP Callouts

ParkService

//Generated by wsdl2apex
public class ParkService {
public class byCountryResponse {
public String[] return_x;
private String[] return_x_type_info = new
String[]{'return','http://parks.services/',null,'0','-1','false'};
private String[] apex_schema_type_info = new
String[]{'http://parks.services/','false','false'};
private String[] field_order_type_info = new String[]{'return_x'};
}
public class byCountry {
public String arg0;
private String[] arg0_type_info = new
String[]{'arg0','http://parks.services/',null,'0','1','false'};
private String[] apex_schema_type_info = new
String[]{'http://parks.services/','false','false'};
private String[] field_order_type_info = new String[]{'arg0'};
}
public class ParksImplPort {
public String endpoint_x = 'https://th-apex-soapservice.herokuapp.com/service/parks';
public Map<String,String> inputHttpHeaders_x;
public Map<String,String> outputHttpHeaders_x;
public String clientCertName_x;
public String clientCert_x;
public String clientCertPasswd_x;
public Integer timeout_x;
private String[] ns_map_type_info = new String[]{'http://parks.services/',
'ParkService'};
public String[] byCountry(String arg0) {
ParkService.byCountry request_x = new ParkService.byCountry();
request_x.arg0 = arg0;
ParkService.byCountryResponse response_x;
Map<String, ParkService.byCountryResponse> response_map_x =
new Map<String, ParkService.byCountryResponse>();
response_map_x.put('response_x', response_x);
WebServiceCallout.invoke(
this,
request_x,
response_map_x,
new String[]{endpoint_x,
'',
'http://parks.services/',
'byCountry',
'http://parks.services/',
'byCountryResponse',
'ParkService.byCountryResponse'}
);
response_x = response_map_x.get('response_x');
return response_x.return_x;
}
}
}

ParkLocator

public class ParkLocator {
public static String[] country(String theCountry){
ParkService.ParksImplPort parkSvc = new
ParkService.ParksImplPort();
return parkSvc.byCountry(theCountry);
}
}

ParkLocatorTest

@isTest
private class ParkLocatorTest {
@isTest static void testCallout(){
Test.setMock(WebServiceMock.class, new ParkServiceMock());
String country = 'United States';
List<String> result = ParkLocator.country(country);
List<String> parks = new List<String>{'Yellowstone','Mackinac National
Park','Yosemite' };
System.assertEquals(parks, result);
}
}

ParkServiceMock

@isTest
global class ParkServiceMock implements WebServiceMock{
global void doInvoke(
Object stub,
Object request,
Map<String, Object> response,
String endpoint,
String soapAction,
String requestName,
String responseNS,
String responseNam,
String responseType
){
ParkService.byCountryResponse response_x = new
ParkService.byCountryResponse();
response_X.return_x = new List<String>{'Yellowstone','Mackinac National
Park','Yosemite' };
response.put('response_x',response_x);
}
}

4.3 Apex Web Services

AccountManager

@RestResource(urlMapping = '/Accounts/*/contacts')
global with sharing class AccountManager {
@HttpGet
global static Account getAccount(){
RestRequest request = RestContext.request;
string accountId =
request.requestURI.substringBetween('Accounts/','/contacts');
Account result = [SELECT Id, Name, (Select Id, Name from Contacts)
from Account where Id=:accountId Limit 1];
return result;
}
}

AccountManagerTest

@isTest
private class AccountManagerTest {
@isTest static void testGetContactsByAccountId(){
Id recordId = createTestRecord();
RestRequest request = new RestRequest();
request.requestURI =
'https://yourInstance.my.salesforce.com/services/apexrest/Accounts/'
+ recordId +'/contacts';
request.httpMethod = 'GET';
RestContext.request = request;
Account thisAccount = AccountManager.getAccount();
System.assert(thisAccount != null);
System.assertEquals('Test record', thisAccount.Name);
}
static Id createTestRecord(){
Account accountTest = new Account(
Name = 'Test record');
insert accountTest;
Contact contactTest = new Contact(
FirstName = 'John',
LastName = 'Doe',
AccountId = accountTest.Id
);
insert contactTest;
return accountTest.Id;
}
}
